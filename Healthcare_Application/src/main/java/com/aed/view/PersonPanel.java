/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.aed.view;

import com.aed.aedlab2.AedLab2;
import com.aed.model.Community;
import com.aed.model.Docter;
import com.aed.model.Encounter;
import com.aed.model.Hospital;
import com.aed.model.Patient;
import com.aed.model.Person;
import java.awt.Color;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yashpawar
 */
public class PersonPanel extends javax.swing.JPanel {

    /**
     * Creates new form PersonPanel
     */
    Person p;
    Map<Integer, Person> per = new HashMap<>();

    public PersonPanel() {
        initComponents();
        
        addButton.setForeground(Color.white);
        updateButton.setForeground(Color.white);
        deleteButton.setForeground(Color.white);
        resetButton.setForeground(Color.white);
        searchButton.setForeground(Color.white);
        
        if (SystemAdminJFrame.ad.equals("SYSTEMADMIN")) {
            p = LoginJFrame.loggedInPerson;
            setPersonTable(AedLab2.personMap);
        } else {
            p = LoginJFrame.loggedInPerson;
            
            addButton.setVisible(false);
            deleteButton.setVisible(false);
            p = LoginJFrame.loggedInPerson;
            per.put(p.getPersonID(), p);
            setPersonTable(per);
        }
        
        
        
    }

    void setPersonTable(Map<Integer, Person> per) {
        int rIndex = 0;

        String[][] data = new String[per.size()][4];
        for (Person e : per.values()) {
            if (!e.getRole().equals("SYSTEMADMIN")) {
                data[rIndex][0] = String.valueOf(e.getPersonID());
                data[rIndex][1] = e.getName();
                data[rIndex][2] = e.getUserName();
                data[rIndex][3] = e.getRole();
                rIndex++;
            }
        }
        String[] col = {"ID", "Name", "UserName", "Role"};
        DefaultTableModel model = new DefaultTableModel(data, col);
        personTable.setModel(model);
    }

    void resetAction() {
        nameField.setText("");
        userNameField.setText("");
        passwordField.setText("");
        ageField.setText("");
        houseIdField.setText("");
        if (SystemAdminJFrame.ad.equals("SYSTEMADMIN")) {
            p = LoginJFrame.loggedInPerson;
            setPersonTable(AedLab2.personMap);
        } else {
            p = LoginJFrame.loggedInPerson;
            per.put(p.getPersonID(), p);
            setPersonTable(per);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adminProfilePanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        userNameLabel = new javax.swing.JLabel();
        userNameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JTextField();
        ageLabel = new javax.swing.JLabel();
        ageField = new javax.swing.JTextField();
        genderLabel = new javax.swing.JLabel();
        houseIdLabel = new javax.swing.JLabel();
        houseIdField = new javax.swing.JTextField();
        genderComboBox = new javax.swing.JComboBox<>();
        userNameLabel1 = new javax.swing.JLabel();
        roleComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        personTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        adminProfilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Admin Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 14))); // NOI18N
        adminProfilePanel.setName(""); // NOI18N
        adminProfilePanel.setPreferredSize(new java.awt.Dimension(504, 0));
        adminProfilePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nameLabel.setText("Name:");
        nameLabel.setToolTipText("");
        adminProfilePanel.add(nameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, 100, 30));
        adminProfilePanel.add(nameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, 130, 30));

        userNameLabel.setText("Role:");
        userNameLabel.setToolTipText("");
        adminProfilePanel.add(userNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 90, 30));

        userNameField.setToolTipText("");
        adminProfilePanel.add(userNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, 130, 30));

        passwordLabel.setText("Password:");
        passwordLabel.setToolTipText("");
        adminProfilePanel.add(passwordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 170, 100, 30));
        adminProfilePanel.add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 170, 130, 30));

        ageLabel.setText("Age:");
        adminProfilePanel.add(ageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 210, 100, 30));

        ageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ageFieldKeyPressed(evt);
            }
        });
        adminProfilePanel.add(ageField, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 210, 130, 30));

        genderLabel.setText("Gender:");
        genderLabel.setToolTipText("");
        adminProfilePanel.add(genderLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, 100, 30));

        houseIdLabel.setText("HouseId:");
        houseIdLabel.setToolTipText("");
        adminProfilePanel.add(houseIdLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, 100, 30));

        houseIdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseIdFieldActionPerformed(evt);
            }
        });
        adminProfilePanel.add(houseIdField, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, 130, 30));

        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MALE", "FEMALE" }));
        genderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderComboBoxActionPerformed(evt);
            }
        });
        adminProfilePanel.add(genderComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 250, 130, 30));

        userNameLabel1.setText("UserName:");
        userNameLabel1.setToolTipText("");
        adminProfilePanel.add(userNameLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 100, 30));

        roleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PATIENT", "DOCTER", "HOSPITALADMIN", "COMMUNITYADMIN" }));
        adminProfilePanel.add(roleComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 130, 130, 30));

        personTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        personTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                personTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(personTable);

        adminProfilePanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 480, 230));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        adminProfilePanel.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 140, 300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adminProfilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adminProfilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void houseIdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseIdFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_houseIdFieldActionPerformed

    private void genderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genderComboBoxActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (p.getRole().equalsIgnoreCase("PATIENT")) {
            int patId = 0;
            boolean err = false;
            for (Patient pat : AedLab2.patientMap.values()) {
                if (pat.getPersonId() == p.getPersonID()) {
                    patId = pat.getPatientId();
                }
            }

            for (Encounter e : AedLab2.encounterMap.values()) {
                if (e.getPatientId() == patId) {
                    err = true;
                }
            }
            if (err) {
                JOptionPane.showMessageDialog(this, "Person has Encounters\nHence cannot be deleted");
            } else {
                AedLab2.personMap.remove(p.getPersonID(), p);
                setPersonTable(AedLab2.personMap);
                JOptionPane.showMessageDialog(this, "Person deleted");
                setPersonTable(AedLab2.personMap);
            }

        }//patient

        if (p.getRole().equalsIgnoreCase("DOCTER")) {
            boolean err = false;
            int docterID = 0;
            for (Docter d : AedLab2.docterMap.values()) {
                if (d.getPersonId() == p.getPersonID()) {
                    docterID = d.getDocterId();
                }
            }
            for (Encounter e : AedLab2.encounterMap.values()) {
                if (e.getDoctorId() == docterID) {
                    if (e.getStatus().equalsIgnoreCase("PENDING")) {
                        err = true;
                        JOptionPane.showMessageDialog(this, "Docter has Pending Encounters\nHence cannot be deleted");
                        break;
                    } else {
                        AedLab2.encounterMap.remove(e.getEncounterID(), e);

                        for (Hospital h : AedLab2.hospitalMap.values()) {
                            if (h.getDocterId().contains(docterID)) {
                                h.setDocterId(utility.UtilityFunctions.removeIntFromList(
                                        h.getDocterId(), docterID));
                                //update hospital
                                AedLab2.hospitalMap.replace(h.getHospitalId(), h);
                                //delete person and update personMap
                                AedLab2.personMap.remove(p.getPersonID(), p);
                                setPersonTable(AedLab2.personMap);
                                JOptionPane.showMessageDialog(this, "Docter deleted");
                            }//hospital if
                        }
                    }
                }
            }
        }//docter

        if (p.getRole().equalsIgnoreCase("HOSPITALADMIN")) {
            boolean err = false;
            for (Hospital h : AedLab2.hospitalMap.values()) {
                if (h.getPersonId() == p.getPersonID()) {
                    err = true;
                    JOptionPane.showMessageDialog(this, "person is currently a HospitalAdmin\nHence cannot be deleted");
                }
            }
            if (!err) {
                AedLab2.personMap.remove(p.getPersonID(), p);
                setPersonTable(AedLab2.personMap);
                JOptionPane.showMessageDialog(this, "HospitalAdmin deleted");
            }
        }

        if (p.getRole().equalsIgnoreCase("COMMUNITYADMIN")) {
            boolean err = false;
            for (Community h : AedLab2.communityMap.values()) {
                if (h.getPersonId() == p.getPersonID()) {
                    err = true;
                    JOptionPane.showMessageDialog(this, "person is currently a CommunityAdmin\nHence cannot be deleted");
                }
            }
            if (!err) {
                AedLab2.personMap.remove(p.getPersonID(), p);
                setPersonTable(AedLab2.personMap);
                JOptionPane.showMessageDialog(this, "CommunityAdmin deleted");
            }
        }
        resetAction();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void personTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personTableMouseClicked
        // TODO add your handling code here:

        int id = Integer.parseInt(personTable.getValueAt(personTable.getSelectedRow(), 0).toString());
        p = AedLab2.personMap.get(id);

        //setters
        nameField.setText(p.getName());
        userNameField.setText(p.getUserName());
        passwordField.setText(p.getPassword());
        ageField.setText(String.valueOf(p.getAge()));
        houseIdField.setText(String.valueOf(p.getHouseID()));
        if (p.getGender().equalsIgnoreCase("male")) {
            genderComboBox.setSelectedItem("MALE");
        } else {
            genderComboBox.setSelectedItem("FEMALE");
        }
        if (p.getRole().equalsIgnoreCase("DOCTER"))
            roleComboBox.setSelectedItem("DOCTER");
        else if (p.getRole().equalsIgnoreCase("HOSPITALADMIN"))
            roleComboBox.setSelectedItem("HOSPITALADMIN");
        else if (p.getRole().equalsIgnoreCase("COMMUNITYADMIN"))
            roleComboBox.setSelectedItem("COMMUNITYADMIN");
        else
            roleComboBox.setSelectedItem("PATIENT");
    }//GEN-LAST:event_personTableMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (Validation())
            JOptionPane.showMessageDialog(this, "Please enter all fields");
        else {
            if (checkUserName(nameField.getText())) {
                JOptionPane.showMessageDialog(this, "USERNAME Does not exist\nPlease use different username");
            } else if (Integer.parseInt(ageField.getText()) < 20 || Integer.parseInt(ageField.getText()) > 100) {
                JOptionPane.showMessageDialog(this, "Age not between 20 and 100");
            } else {
                p.setName(nameField.getText());
                p.setUserName(userNameField.getText());
                p.setPassword(passwordField.getText());
                p.setAge(Integer.parseInt(ageField.getText()));
                p.setHouseID(Integer.parseInt(houseIdField.getText()));
                p.setGender(genderComboBox.getSelectedItem().toString());
                AedLab2.personMap.replace(p.getPersonID(), p);
                JOptionPane.showMessageDialog(this, "Person Updated");
                resetAction();
            }//username validation else
        }//fields validation else
    }//GEN-LAST:event_updateButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        resetAction();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        Map<Integer, Person> sea = new HashMap<>();
        int flag = 0;
        if (flag == 0 && !nameField.getText().isEmpty()) {
            for (Person p : AedLab2.personMap.values()) {
                if (p.getName().contains(nameField.getText())) {
                    sea.put(p.getPersonID(), p);
                    setPersonTable(sea);
                    flag = 1;
                }
            }
        }
        if (flag == 0 && !userNameField.getText().isEmpty()) {
            for (Person p : AedLab2.personMap.values()) {
                if (p.getUserName().contains(userNameField.getText())) {
                    sea.put(p.getPersonID(), p);
                    setPersonTable(sea);
                    flag = 1;
                }
            }
        }
        if (flag == 0 && !passwordField.getText().isEmpty()) {
            for (Person p : AedLab2.personMap.values()) {
                if (p.getPassword().contains(passwordField.getText())) {
                    sea.put(p.getPersonID(), p);
                    setPersonTable(sea);
                    flag = 1;
                }
            }
        }
        if (flag == 0 && !ageField.getText().isEmpty()) {
            for (Person p : AedLab2.personMap.values()) {
                if (String.valueOf(p.getAge()).contains(ageField.getText())) {
                    sea.put(p.getPersonID(), p);
                    setPersonTable(sea);
                    flag = 1;
                }
            }
        }
        if (flag == 0 && !houseIdField.getText().isEmpty()) {
            for (Person p : AedLab2.personMap.values()) {
                if (String.valueOf(p.getHouseID()).contains(houseIdField.getText())) {
                    sea.put(p.getPersonID(), p);
                    setPersonTable(sea);
                    flag = 1;
                }
            }
        }
        if (flag == 0)
            for (Person p : AedLab2.personMap.values())
                if (p.getRole().contains(roleComboBox.getSelectedItem().toString())) {
                    sea.put(p.getPersonID(), p);
                    setPersonTable(sea);
                    flag = 1;
                }
    }//GEN-LAST:event_searchButtonActionPerformed

    public boolean Validation() {
        if (nameField.getText().isEmpty() || userNameField.getText().isEmpty()
                || passwordField.getText().isEmpty() || ageField.getText().isEmpty()
                || houseIdField.getText().isEmpty()) {
            return true;
        }
        return false;
    }

    public boolean checkUserName(String s) {
        for (Person p : AedLab2.personMap.values()) {
            if (p.getUserName().equals(s)) {
                return true;
            }
        }
        return false;
    }

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (Validation())
            JOptionPane.showMessageDialog(this, "Please enter All Fields");
        else {
            if (checkUserName(userNameField.getText())) {
                JOptionPane.showMessageDialog(this, "USERNAME Does not exist\nPlease use different username");
            } else {
                if (roleComboBox.getSelectedItem().toString().equals("DOCTER")) {

                    AedLab2.personMap.put(AedLab2.personId, new Person(AedLab2.personId++, nameField.getText(),
                            userNameField.getText(), passwordField.getText(),
                            roleComboBox.getSelectedItem().toString(), Integer.parseInt(ageField.getText()),
                            genderComboBox.getSelectedItem().toString(), "", Integer.parseInt(houseIdField.getText())));
                    AedLab2.docterMap.put(AedLab2.docterId, new Docter(AedLab2.docterId++,
                            (AedLab2.personId - 1), Arrays.asList()));
                    JOptionPane.showMessageDialog(this, "Docter Added");
                    setPersonTable(AedLab2.personMap);
                } else {
                    System.out.println("Selected Role:" + roleComboBox.getSelectedItem().toString());
                    AedLab2.personMap.put(AedLab2.personId, new Person(AedLab2.personId++, nameField.getText(),
                            userNameField.getText(), passwordField.getText(),
                            roleComboBox.getSelectedItem().toString(), Integer.parseInt(ageField.getText()),
                            genderComboBox.getSelectedItem().toString(), "", Integer.parseInt(houseIdField.getText())));
                    JOptionPane.showMessageDialog(this, "User Added");
                    setPersonTable(AedLab2.personMap);
                }
            }//username validation else
        }//validation else
    }//GEN-LAST:event_addButtonActionPerformed

    private void ageFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageFieldKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c) || c == ' ') {
            ageField.setEditable(false);
            JOptionPane.showMessageDialog(this, "Age should be a number");
        } else {
        }
        ageField.setEditable(true);
    }//GEN-LAST:event_ageFieldKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel adminProfilePanel;
    private javax.swing.JTextField ageField;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> genderComboBox;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JTextField houseIdField;
    private javax.swing.JLabel houseIdLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTable personTable;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox<String> roleComboBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JLabel userNameLabel1;
    // End of variables declaration//GEN-END:variables
}
